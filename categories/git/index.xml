<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Shuhan_Yao.Blog</title>
    <link>https://yaoshuhan.github.io/categories/git/</link>
    <description>Recent content in Git on Shuhan_Yao.Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Aug 2017 16:19:13 +0800</lastBuildDate>
    
	<atom:link href="https://yaoshuhan.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>git版本控制</title>
      <link>https://yaoshuhan.github.io/blog/20170830_git/</link>
      <pubDate>Wed, 30 Aug 2017 16:19:13 +0800</pubDate>
      
      <guid>https://yaoshuhan.github.io/blog/20170830_git/</guid>
      <description>Git简介 Git是一款免费、开源的分布式版本控制系统。
Linus在1991年创建了Linux内核开源项目，有着来自全世界的贡献者参与该项目，使其不断壮大发展。在早期(1991-2002)，绝大多数的Linux内核维护工作是由Linus本人通过手工方式进行合并与归档。直到2002年，随着代码库的逐渐壮大，Linus最终选择了启用BitMover的分布式版本控制系统BitKeeper，BitMover授权Linux社区免费使用。
到了2005年，由于社区内存在试图破解BitKeeper的协议被发现，所以BitMover收回了免费授权。于是，Linus Torvalds花了两周时间用C写了一个分布式版本控制系统&amp;ndash;Git，一个月内Linux社区的源码就由Git管理了，Git也迅速成为最流行的分布式版本控制系统！
Git的提交流程 Git和其他的版本控制系统如SVN的一个不同之处就是除了工作区、版本库之外还有暂存区的概念。
工作区(Working Directory)
工作区即本地项目目录。
版本库(Repository)
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库中有很多东西，包括称为stage(或者index)的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。 在我们把文件往Git仓库里添加的时候，是分两步执行的：
 用git add把文件添加进去，实际上就是把文件修改添加到暂存区。 用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。  值得一提的是，Git追踪并管理的是修改而非文件，所以提交到仓库的是暂存区内的修改，而不是文件本身，而每个版本都是一份文件快照。
当我们执行如下过程：
 第一次修改 git add 第二次修改 git commit git status  会发现，git status的消息显示第二次的修改并没有被提交到仓库中。是由于git add只将第一次修改存入了暂存区，git commit只负责把暂存区的修改提交到仓库，所以第二次的修改没有在暂存区内也没有被提交。
再执行一次git add与git commit或在第一次git commit之前执行git add将第二次修改加入到暂存区，都可以达到将第二次修改提交的效果。
Git的分支管理 每次的版本提交，Git都会把它们串成一条条时间线，这些时间线就是一个个分支。其中有一条主分支master，在我们创建仓库时即存在。HEAD指针指向当前版本,在下图中HEAD指向master，即当前版本为master所在的节点。 Git中对分支的操作可以看作是对链表的操作。当我们创建新分支dev时，Git只需新建一个指针叫dev，指向上次提交，再把HEAD指向dev，就表示当前分支在dev上。 分支的合并可以看作一次提交。假如我们在dev上的工作完成了，就可以把dev合并到master上，相对于master来说合并的过程类似一次提交，同样也需要解决冲突，再将master指向dev当前提交就完成了合并。 合并完之后可以选择将dev分支删除，即将dev指针删掉。Git鼓励大量使用分支进行开发，在我们修正bug时可以新建bug分支，写实验性特性时可以新建feature分支，从而实现在不影响稳定版本的基础上进行开发。
远端仓库 Git作为分布式版本控制系统，同一个Git仓库可以通过克隆分布到不同的机器上。在实际的生产中，通常会找一台电脑或者像github(在线Git仓库托管服务平台)充当Git仓库服务器。
本地仓库与github仓库的通信通常通过SSH或http传输。配置SSH时需在shell或git bash中使用$ ssh-keygen -t rsa -C &amp;quot;email@example.com&amp;quot;，将在用户主目录的.ssh中生成密钥对(id_rsa和id_rsa.pub)，然后github中打开SSH Keys页面将id_rsa.pub的内容加入到其中。
Git操作 配置Git # 配置用户名与邮箱 $ git config --global user.name &amp;quot;My Name&amp;quot; $ git config --global user.</description>
    </item>
    
  </channel>
</rss>
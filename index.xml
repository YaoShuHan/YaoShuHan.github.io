<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shuhan_Yao.Blog</title>
    <link>https://yaoshuhan.github.io/</link>
    <description>Recent content on Shuhan_Yao.Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Sep 2017 13:47:14 +0800</lastBuildDate>
    
	<atom:link href="https://yaoshuhan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MongoDB-基础</title>
      <link>https://yaoshuhan.github.io/blog/mongodb-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 16 Sep 2017 13:47:14 +0800</pubDate>
      
      <guid>https://yaoshuhan.github.io/blog/mongodb-%E5%9F%BA%E7%A1%80/</guid>
      <description>什么是MonogoDB MongoDB是由C++编写的，基于分布式文件存储的开源非关系型数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。MongoDB将数据存储为一个文档，数据结构由键值对组成，其形式类似于JSON对象，字段值可以包含其它文档，数组和文档数组。
{ title: &amp;quot;MongoDB-基础&amp;quot;, trags: [&amp;quot;MongoDB&amp;quot;,&amp;quot;NoSQL&amp;quot;] }  NoSQL简介 NoSQL指的是非关系型的数据看。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称，用于超大规模数据的存储。
NoSQL
 高性能、高可用性、可伸缩性 分布式计算 低成本 架构灵活，半结构化数据（键值对存储，列存储，文档存储，图形数据库） 最终一致性，而非ACID属性 CAP定理  NoSQL数据库分类
   类型 部分代表 特点     列存储 Hbase Cassandra Hypertable 顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。   文档存储 MongoDB CouchDB 文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有有机会对某些字段建立索引，实现关系数据库的某些功能。   Key-Value存储 Tokyo Cabinet/Tyrant BerkeleyDB MemecacheDB Redis 可以通过key快速查询到其value。一般来说，存储不管value的格式，照单全收。（Redis包含了其他功能）   图存储 Neo4J FlockDB 图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。   对象存储 db4o Versant 通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。   xml数据库 BerkeleyDBXML BaseX 高效的存储XML数据，并支持XML的内部查询语法，比如XQuery,Xpath。    MongoDB主要特点  MongoDB面向文档存储，操作起来比较简单和容易。 MongoDB可以设置任何属性的索引来实现更快的排序。 可以通过本地或者网络创建数据镜像，使得MongoDB有更强的扩展性。 如果负载的增加需要更多的存储空间和更强的处理能力，它可以分布在计算机网络中的其他节点上，即分片。 MongoDB支持丰富的查询表达式，查询指令使用JSON形式的标记。 MongoDB中内置GridFS，可以用于存放大量小文件。 MongoDB允许在服务端执行脚本 支持多平台及多语言驱动  ACID</description>
    </item>
    
    <item>
      <title>初识golang—单例模式</title>
      <link>https://yaoshuhan.github.io/blog/%E5%88%9D%E8%AF%86golang%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 16 Sep 2017 11:36:57 +0800</pubDate>
      
      <guid>https://yaoshuhan.github.io/blog/%E5%88%9D%E8%AF%86golang%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>单例模式是设计模式里最为常用的一种，应用该设计模式的目的是保证类仅有一个全局的对象实例。
懒汉模式(Lazy Loading) 懒汉模式是最为简单常见的，最大的缺点是非线程安全的。
type singleton struct { //... } //private var instance *singleton //public func GetInstance() *singleton { if instance == nil { instance = &amp;amp;singleton{} } return instance }  带锁的单例模式 sync包提供两种锁类型：Mutex和RWMutex。Mutex是我们常见的锁类型，当一个goroutine获得Mutex之后，其它的goroutine只能进行等待直到该Mutex被释放。而RWMutex则是较为友好的单读多写模型，写锁会阻止其它所任何goroutine访问，而读锁则只会阻止写而不阻止读。
这里使用了Go的sync.Mutex，解决了懒汉模式的线程安全问题，但是在已生成实例后每次访问还都会调用锁，造成不必要的开销。
type singleton sturct { } var instance *singleton var mu sync.Mutex func GetInstance() *singleton { mu.Lock() defer mu.Unlock() if instance == nil { instance = &amp;amp;singleton{} } return instance }  带检查锁的单例模式 通过再封加一层判断，可以解决不必要开销的问题。
if instance == nil { mu.</description>
    </item>
    
    <item>
      <title>更新OSX的Ruby版本</title>
      <link>https://yaoshuhan.github.io/blog/%E6%9B%B4%E6%96%B0osx%E7%9A%84ruby%E7%89%88%E6%9C%AC/</link>
      <pubDate>Sat, 09 Sep 2017 11:22:16 +0800</pubDate>
      
      <guid>https://yaoshuhan.github.io/blog/%E6%9B%B4%E6%96%B0osx%E7%9A%84ruby%E7%89%88%E6%9C%AC/</guid>
      <description> 在使用Homebrew安装工具时，返回了Ruby版本过低的RuntimeError。OSX是系统自带Ruby的，可以通过RVM(Ruby Version Manager)对其进行更新，RVM包含了Ruby的版本管理和Gem库管理(Gemset)。
安装RVM 1.下载安装RVM
$ curl -L get.rvm.io | bash -s stable  2.更新配置文件
$ source ~/.bashrc $ source ~/.bash_profile  3.验证是否安装成功
$ rvm -v  使用RVM升级Ruby 1.列出已知Ruby版本
$ rvm list  2.安装所需版本
$ rvm install 2.3.4  3.如果bash一片绿油油即成功，失败时执行
$ rvm reinstall 2.3.4  问题汇总 </description>
    </item>
    
    <item>
      <title>初识golang—并发基础</title>
      <link>https://yaoshuhan.github.io/blog/%E5%88%9D%E8%AF%86golang%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 08 Sep 2017 20:51:36 +0800</pubDate>
      
      <guid>https://yaoshuhan.github.io/blog/%E5%88%9D%E8%AF%86golang%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/</guid>
      <description>Golang是一个并发性极好的语言，通过goroutine和channel相配合，可以帮助我们轻松实现高并发服务端程序。
goroutine 相比于其它大部分语言通过库的方式支持协程，Go在语言级别支持协程，goroutine是Golang中对协程的实现，由Go的runtime管理。与传统的系统级进程和线程相比，协程最大的优势在于其“轻量级”，可以轻松创建上百万个而不必当心系统资源衰竭。 在Go中创建goroutine很简单，通过在函数调用前加上go关键字即可“ go func(&amp;hellip;) ”，在函数返回时这个goroutine也自动结束了，函数的返回值会被自动丢弃。
func loop(x int) { for i:=0; i &amp;lt; x; i++ fmt.Println(x) } func main(){ go loop(x) }  上面这段代码展示了go关键字的使用，但是会发现没有预期的运行效果。因为在goroutine并发执行时，主函数已经返回，它并不会等待goroutine的结束。 通过对主程序添加等待函数之类的阻塞主函数的结束来等待所有的协程执行完毕即可解决，但这种方式显然不够优雅。要如何知道goroutine都退出了又能阻塞主函数的结束呢？channel就是我们要找的答案。
channel 并发编程的一大难度是如何协调并发单元之间的通信，在C语言中，我们会为线程共享的数据加上锁(有时是好几层)，这使得逻辑与代码上变的臃肿。在将简洁与并发编程作为核心优势的Go中，提供了以信息机制提供数据共享支持的channel。
 &amp;ldquo;dont communicate by sharing memory, share memory by communicating&amp;rdquo;
 channel是Go在语言级别提供的goroutine间的通信方式，channel是进程内的通信，可以在多个goroutine之间传递信息，传递对象的行为和函数传参类似。channel是类型相关的，需要在声明channel时指定。channel的读写操作都是阻塞的，信道内空时才可写入，信道内有数据时才可读出，否则都将等待。
//channel的一般声明形式 var chanName chan ElementType //channel的一般定义形式 ch := make(chan int) //channel的写操作 ch &amp;lt;- value //channel的读操作 value := &amp;lt;-ch  通过channel我们可以将之前的代码进行改进
var ch chan string = make(chan string, 0) func loop(x int) { for i := 0; i &amp;lt; x; i++ { fmt.</description>
    </item>
    
    <item>
      <title>git版本控制</title>
      <link>https://yaoshuhan.github.io/blog/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 30 Aug 2017 16:19:13 +0800</pubDate>
      
      <guid>https://yaoshuhan.github.io/blog/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Second</title>
      <link>https://yaoshuhan.github.io/photo/second/</link>
      <pubDate>Thu, 13 Jul 2017 11:22:16 +0800</pubDate>
      
      <guid>https://yaoshuhan.github.io/photo/second/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>